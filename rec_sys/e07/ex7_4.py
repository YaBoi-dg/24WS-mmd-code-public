# -*- coding: utf-8 -*-
"""Ex7.4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k9eTwVt9mbAJ_fIO56dcp18iHqZ2wAuS
"""

import random
from mpmath import mp

def compute_k_shingles(s: str, k: int):
    """
    Compute k-shingles for a given string of digits.
    Return a sorted list of integers corresponding to the k-shingles.
    """
    shingles = set()
    for i in range(len(s) - k + 1):
        k_shingle_str = s[i:i+k]
        k_shingle_int = int(k_shingle_str)
        shingles.add(k_shingle_int)
    return sorted(shingles)

def generate_hash_functions(K, N):
    """
    Generate K hash functions of the form h(x) = ((a*x + b) % p) % N + 1.

    Parameters:
    - K: Number of hash functions to generate.
    - N: Range for x values.

    Returns:
    - A list of tuples (a, b, p) representing hash functions.
    """
    hash_funcs = []
    p = 2**31 - 1  # Large prime
    for _ in range(K):
        a = random.randint(1, N)  # Coefficients must be > 0
        b = random.randint(0, N)
        hash_funcs.append((a, b, p))
    return hash_funcs

def parse_data(input_data):
    """
    Parse the input data structure and return it in the standardized format.

    """
    # Example: Assume input_data is a dictionary {column_id: [indices]}
    data_matrix = [set(indices) for _, indices in input_data.items()]
    return data_matrix

def minhash_signatures(data_matrix, hash_funcs, N):
    """
    Compute the MinHash signature matrix for multiple columns using given hash functions.

    Returns:
    - A 2D list (signature matrix), where each row corresponds to a hash function
      and each column corresponds to a data column.
    """

    K = len(hash_funcs)
    m = len(data_matrix)
    signature_matrix = [[float('inf')] * m for _ in range(K)]

    for col_idx, positions in enumerate(data_matrix):
        for row_idx, (a, b, p) in enumerate(hash_funcs):
            for x in positions:
                h = ((a * x + b) % p) % N + 1
                if h < signature_matrix[row_idx][col_idx]:
                    signature_matrix[row_idx][col_idx] = h

    return signature_matrix

# Main
if __name__ == "__main__":
    # Example raw data
    raw_data = {
        "col1": [1, 3, 5],         # Column 1
        "col2": [2, 4, 6],         # Column 2
        "col3": [1, 2, 3, 6, 10],  # Column 3
    }

    # Parse raw data into standardized format
    data_matrix = parse_data(raw_data)

    # Generate K hash functions
    K = 100
    N = 10**12  # Max range for elements
    hash_funcs = generate_hash_functions(K, N)

    # Compute MinHash signature matrix
    signature_matrix = minhash_signatures(data_matrix, hash_funcs, N)

    # Output first 5 rows of the signature matrix
    print("MinHash signature matrix (first 5 rows):")
    for row_idx, row in enumerate(signature_matrix[:5]):
        print(f"Hash function {row_idx + 1}: {row}")